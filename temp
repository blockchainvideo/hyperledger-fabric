  app.get('/CreateGrade.html', async function (req, res) { 

    res.sendFile(path.join(__dirname+'/html pages/projectblockchain/Create1.html'));
  
  });

   app.post('/addgrades/', async function (req, res) {
    var examRegistrationNumber = req.body.examRegistrationNumber;
    var examName = req.body.examName;
    var student= req.body.student;
    var grade= req.body.grade;
  
    const walletPath = path.join(process.cwd(), 'wallet');
    const wallet = new FileSystemWallet(walletPath);
    console.log(`Wallet path: ${walletPath}`);
  
    // Check to see if we've already enrolled the user.
    const userExists = await wallet.exists(`userUniversity`);
    if (!userExists) {
        console.log(`An identity for the user userCollege does not exist in the wallet`);
        console.log('Run the registerUser.js application before retrying');
        return;
    }
  
    // Create a new gateway for connecting to our peer node.
    const gateway = new Gateway();
    await gateway.connect(ccpPathUniversity, { wallet, identity: 'userUniversity' , discovery: { enabled: true, asLocalhost: true } });
  
    // Get the network (channel) our contract is deployed to.
    const network = await gateway.getNetwork('twochannel');
  
    // Get the contract from the network.
    const contract = network.getContract('grades');
   
    // Submit the specified transaction.
  
  
    await contract.submitTransaction('initPart', `${examRegistrationNumber}`, `${examName}`, `${student}`,`${grade}`);
    res.send('Transaction has been submitted');
  
    // Disconnect from the gateway.
    await gateway.disconnect();
  
  
    })